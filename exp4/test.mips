	.text
	.abicalls
	.option	pic0
	.section	.mdebug.abi32,"",@progbits
	.nan	legacy
	.file	"test.ll"
	.text
	.globl	read                    # -- Begin function read
	.p2align	2
	.type	read,@function
	.set	nomicromips
	.set	nomips16
	.ent	read
read:                                   # @read
	.cfi_startproc
	.frame	$sp,32,$ra
	.mask 	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	.set	noat
# %bb.0:
	addiu	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	sw	$ra, 28($sp)            # 4-byte Folded Spill
	sw	$16, 24($sp)            # 4-byte Folded Spill
	.cfi_offset 31, -4
	.cfi_offset 16, -8
	jal	getchar
	sw	$zero, 20($sp)
	sw	$2, 16($sp)
	addiu	$16, $zero, 10
	lw	$1, 16($sp)
	beq	$1, $16, $BB0_2
	nop
$BB0_1:                                 # %hard3begin
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 20($sp)
	sll	$2, $1, 1
	sll	$1, $1, 3
	addu	$1, $1, $2
	lw	$2, 16($sp)
	addu	$1, $1, $2
	addiu	$1, $1, -48
	jal	getchar
	sw	$1, 20($sp)
	sw	$2, 16($sp)
	lw	$1, 16($sp)
	bne	$1, $16, $BB0_1
	nop
$BB0_2:                                 # %hard3end
	lw	$2, 20($sp)
	lw	$16, 24($sp)            # 4-byte Folded Reload
	lw	$ra, 28($sp)            # 4-byte Folded Reload
	jr	$ra
	addiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	read
$func_end0:
	.size	read, ($func_end0)-read
	.cfi_endproc
                                        # -- End function
	.globl	write                   # -- Begin function write
	.p2align	2
	.type	write,@function
	.set	nomicromips
	.set	nomips16
	.ent	write
write:                                  # @write
	.cfi_startproc
	.frame	$sp,40,$ra
	.mask 	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	.set	noat
# %bb.0:
	addiu	$sp, $sp, -40
	.cfi_def_cfa_offset 40
	sw	$ra, 36($sp)            # 4-byte Folded Spill
	sw	$16, 32($sp)            # 4-byte Folded Spill
	.cfi_offset 31, -4
	.cfi_offset 16, -8
	addiu	$1, $zero, 1
	sw	$1, 24($sp)
	j	$BB1_2
	sw	$4, 28($sp)
$BB1_1:                                 # %hard4begin
                                        #   in Loop: Header=BB1_2 Depth=1
	lw	$1, 24($sp)
	sll	$2, $1, 1
	sll	$1, $1, 3
	addu	$1, $1, $2
	sw	$1, 24($sp)
$BB1_2:                                 # %hard4before
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 24($sp)
	lw	$2, 28($sp)
	slt	$1, $2, $1
	beqz	$1, $BB1_1
	nop
# %bb.3:                                # %hard4end
	lui	$1, 52428
	ori	$16, $1, 52429
	lw	$1, 24($sp)
	multu	$1, $16
	mfhi	$1
	srl	$1, $1, 3
	j	$BB1_5
	sw	$1, 24($sp)
$BB1_4:                                 # %hard11begin
                                        #   in Loop: Header=BB1_5 Depth=1
	lw	$1, 24($sp)
	multu	$1, $16
	mfhi	$2
	lw	$3, 28($sp)
	divu	$zero, $3, $1
	teq	$1, $zero, 7
	mflo	$5
	addiu	$4, $5, 48
	sw	$4, 20($sp)
	mul	$1, $5, $1
	subu	$1, $3, $1
	sw	$1, 28($sp)
	srl	$1, $2, 3
	jal	putchar
	sw	$1, 24($sp)
$BB1_5:                                 # %hard11before
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 28($sp)
	slti	$1, $1, 10
	beqz	$1, $BB1_4
	nop
# %bb.6:                                # %hard11end
	lw	$1, 28($sp)
	jal	putchar
	addiu	$4, $1, 48
	jal	putchar
	addiu	$4, $zero, 10
	lw	$2, 28($sp)
	lw	$16, 32($sp)            # 4-byte Folded Reload
	lw	$ra, 36($sp)            # 4-byte Folded Reload
	jr	$ra
	addiu	$sp, $sp, 40
	.set	at
	.set	macro
	.set	reorder
	.end	write
$func_end1:
	.size	write, ($func_end1)-write
	.cfi_endproc
                                        # -- End function
	.globl	fibo                    # -- Begin function fibo
	.p2align	2
	.type	fibo,@function
	.set	nomicromips
	.set	nomips16
	.ent	fibo
fibo:                                   # @fibo
	.cfi_startproc
	.frame	$sp,32,$ra
	.mask 	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	.set	noat
# %bb.0:
	addiu	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	sw	$ra, 28($sp)            # 4-byte Folded Spill
	sw	$16, 24($sp)            # 4-byte Folded Spill
	.cfi_offset 31, -4
	.cfi_offset 16, -8
	addiu	$1, $zero, 1
	beq	$4, $1, $BB2_2
	sw	$4, 20($sp)
# %bb.1:                                # %hard2beginand
	addiu	$1, $zero, 2
	lw	$2, 20($sp)
	bne	$2, $1, $BB2_3
	nop
$BB2_2:                                 # %hard2begin
	addiu	$2, $zero, 1
	lw	$16, 24($sp)            # 4-byte Folded Reload
	lw	$ra, 28($sp)            # 4-byte Folded Reload
	jr	$ra
	addiu	$sp, $sp, 32
$BB2_3:                                 # %hard2end
	lw	$1, 20($sp)
	jal	fibo
	addiu	$4, $1, -1
	move	$16, $2
	lw	$1, 20($sp)
	jal	fibo
	addiu	$4, $1, -2
	addu	$2, $16, $2
	lw	$16, 24($sp)            # 4-byte Folded Reload
	lw	$ra, 28($sp)            # 4-byte Folded Reload
	jr	$ra
	addiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	fibo
$func_end2:
	.size	fibo, ($func_end2)-fibo
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	2
	.type	main,@function
	.set	nomicromips
	.set	nomips16
	.ent	main
main:                                   # @main
	.cfi_startproc
	.frame	$sp,32,$ra
	.mask 	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	.set	noat
# %bb.0:
	addiu	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	sw	$ra, 28($sp)            # 4-byte Folded Spill
	.cfi_offset 31, -4
	addiu	$1, $zero, 1
	jal	read
	sw	$1, 16($sp)
	sw	$2, 24($sp)
	jal	write
	move	$4, $2
	j	$BB3_2
	nop
$BB3_1:                                 # %hard6begin
                                        #   in Loop: Header=BB3_2 Depth=1
	jal	fibo
	lw	$4, 16($sp)
	sw	$2, 20($sp)
	jal	write
	move	$4, $2
	lw	$1, 16($sp)
	addiu	$1, $1, 1
	sw	$1, 16($sp)
$BB3_2:                                 # %hard6before
                                        # =>This Inner Loop Header: Depth=1
	lw	$1, 16($sp)
	lw	$2, 24($sp)
	slt	$1, $2, $1
	beqz	$1, $BB3_1
	nop
# %bb.3:                                # %hard6end
	addiu	$2, $zero, 1
	lw	$ra, 28($sp)            # 4-byte Folded Reload
	jr	$ra
	addiu	$sp, $sp, 32
	.set	at
	.set	macro
	.set	reorder
	.end	main
$func_end3:
	.size	main, ($func_end3)-main
	.cfi_endproc
                                        # -- End function
	.type	_a,@object              # @_a
	.comm	_a,4,4
	.type	b,@object               # @b
	.comm	b,4,4
	.type	c,@object               # @c
	.comm	c,4,4

	.section	".note.GNU-stack","",@progbits
	.text
